name: build all RPMs
on: workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: fedora
      env:
        shell: bash
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: dnf install -y curl rpmdevtools rpm-build dnf-utils

    - name: Download RPM Sources
      run: |
        rpmdev-setuptree
        for i in ./*.spec
        do
        spectool -R -g $i 2> /dev/null &
        done
        wait

#    - name: Build gtk3-ubuntu
#      run: |
#        patch -p1 ./gtk3.spec -i ./patches/gtk3-ubuntu.patch
#        dnf builddep -y --spec ./gtk3.spec
#        spectool -R -g ./gtk3.spec
#        rpmbuild --nodebuginfo -bb ./gtk3.spec
#        rm -f "$(rpm --eval '%{_rpmdir}')"/*/gtk3-ubuntu-tests* "$(rpm --eval '%{_rpmdir}')"/*/gtk3-ubuntu-devel-docs* "$(rpm --eval '%{_rpmdir}')"/*/gtk-update-icon-cache* "$(rpm --eval '%{_rpmdir}')"/*/gtk3-ubuntu-immodule*

#    - name: Build virtual
#      run: |
#        sudo gem install -q fpm
#        chmod +x ./scripts/*.sh
#        bash ./scripts/generate-virtual.sh
#        mkdir -p ~/rpmbuild/RPMS/noarch/
#        mv gtk3*.rpm ~/rpmbuild/RPMS/noarch/
#        dnf install -y "$(rpm --eval '%{_rpmdir}')"/*/gtk3-ubuntu* ~/rpmbuild/RPMS/noarch/*.rpm

#    - name: Build xpathselect-devel
#      run: |
#        dnf builddep -y --spec ./xpathselect-devel.spec
#        rpmbuild --nodebuginfo -bb ./xpathselect-devel.spec

    - name: Build libunity
      run: |
        dnf builddep -y --spec ./libunity.spec
        rpmbuild --nodebuginfo -bb ./libunity.spec

    - name: Build libunity-misc-devel
      run: |
        dnf builddep -y --spec ./libunity-misc-devel.spec
        rpmbuild --nodebuginfo -bb ./libunity-misc-devel.spec

#    - name: Build compiz9
#      run: |
#        dnf builddep -y --spec ./compiz9.spec
#        rpmbuild --nodebuginfo -bb ./compiz9.spec

    - name: Build frame-devel
      run: |
        dnf builddep -y --spec ./frame-devel.spec
        rpmbuild --nodebuginfo -bb ./frame-devel.spec

    - name: Build grail-devel
      run: |
        rpm -ivh "$(rpm --eval '%{_rpmdir}')"/*/frame-devel*
        dnf builddep -y --spec ./grail-devel.spec
        rpmbuild --nodebuginfo -bb ./grail-devel.spec

    - name: Build geis-devel
      run: |
        rpm -ivh "$(rpm --eval '%{_rpmdir}')"/*/grail-devel*
        dnf builddep -y --spec ./geis-devel.spec
        rpmbuild --nodebuginfo -bb ./geis-devel.spec

    - name: Build glewmx-devel
      run: |
        dnf builddep -y --spec ./glewmx-devel.spec
        rpmbuild --nodebuginfo -bb ./glewmx-devel.spec

    - name: Build nux-devel
      run: |
        dnf install -y 'pkgconfig(glu)'
        rpm -ivh "$(rpm --eval '%{_rpmdir}')"/*/geis-devel* "$(rpm --eval '%{_rpmdir}')"/*/glewmx-devel*
        dnf builddep -y --spec ./nux-devel.spec
        rpmbuild --nodebuginfo -bb ./nux-devel.spec

    - name: Build gsettings-ubuntu-touch-schemas
      run: |
        dnf builddep -y --spec ./gsettings-ubuntu-touch-schemas.spec
        rpmbuild --nodebuginfo -bb ./gsettings-ubuntu-touch-schemas.spec

    - name: Build unity-settings-daemon-devel
      run: |
        rpm -ivh "$(rpm --eval '%{_rpmdir}')"/*/gsettings-ubuntu-touch-schemas*
        dnf builddep -y --spec ./unity-settings-daemon-devel.spec
        rpmbuild --nodebuginfo -bb ./unity-settings-daemon-devel.spec

#    - name: Build ido-devel
#      run: |
#        dnf builddep -y --spec ./ido-devel.spec
#        rpmbuild --nodebuginfo -bb ./ido-devel.spec
#        sudo dnf install -y "$(rpm --eval '%{_rpmdir}')"/*/ido-devel*.rpm

    - name: Build libindicator
      run: |
        dnf builddep -y --spec ./libindicator.spec
        rpmbuild --nodebuginfo -bb ./libindicator.spec

    - name: Build unityx-shell
      run: |
        dnf install -y "$(rpm --eval '%{_rpmdir}')"/*/*.rpm
        dnf builddep -y --spec ./unityx-shell.spec
        rpmbuild --nodebuginfo -bb ./unityx-shell.spec

    - name: Build unity-asset-pool
      run: |
        dnf builddep -y --spec ./unity-asset-pool.spec
        rpmbuild --nodebuginfo -bb ./unity-asset-pool.spec

    - name: Build unity-session
      run: |
        dnf install -y "$(rpm --eval '%{_rpmdir}')"/*/unityx-shell*.rpm
        dnf builddep -y --spec ./unity-session.spec
        rpmbuild --nodebuginfo -bb ./unity-session.spec

    - name: Upload RPMs
      if: success() || failure()
      uses: actions/upload-artifact@v3.1.0
      with:
          name: Built-RPMS
          path: ~/rpmbuild/RPMS/*/*
